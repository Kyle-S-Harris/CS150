{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red65\green182\blue69;\red30\green32\blue40;\red198\green124\blue72;
\red219\green44\blue56;\red178\green24\blue137;\red255\green255\blue255;\red0\green160\blue190;\red131\green192\blue87;
\red120\green109\blue196;}
{\*\expandedcolortbl;;\csgenericrgb\c25500\c71400\c27000;\csgenericrgb\c11800\c12500\c15700;\csgenericrgb\c77800\c48800\c28400;
\csgenericrgb\c85900\c17100\c21900;\csgenericrgb\c69800\c9500\c53600;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c62600\c74600;\csgenericrgb\c51200\c75400\c34300;
\csgenericrgb\c46900\c42600\c77000;}
\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //XboxConsole.h\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \

\f0 \cf4 \
\
#ifndef XBOXCONSOLE_H
\f1 \cf0 \

\f0 \cf4 #define XBOXCONSOLE_H
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \
\

\f0 \cf6 using\cf7  \cf6 namespace\cf7  \cf8 std\cf7 ;
\f1 \cf0 \
\

\f0 \cf6 class\cf7  XboxConsole
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf6 private\cf7 :
\f1 \cf0 \

\f0 \cf7     \cf6 static\cf7  \cf6 int\cf7  s_nextID;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_id;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_generation;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_submodel;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_chipset;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_ramSize;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_storageRating;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_quantity;
\f1 \cf0 \

\f0 \cf7     \cf6 double\cf7  m_price;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf6 public\cf7 :
\f1 \cf0 \

\f0 \cf7     XboxConsole();
\f1 \cf0 \

\f0 \cf7     XboxConsole(\cf8 string\cf7 , \cf8 string\cf7 , \cf8 string\cf7 , \cf6 int\cf7 , \cf6 int\cf7 , \cf6 int\cf7 , \cf6 double\cf7 );
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getId() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_id\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getGeneration() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_generation\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getSubmodel() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_submodel\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getChipset() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_chipset\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getRamSize() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_ramSize\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getStorageRating() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_storageRating\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getQuantity () \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_quantity\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 double\cf7  getPrice() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_price\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setGeneration(\cf8 string\cf7  generation) \{ \cf9 m_generation\cf7  = generation; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setSubmodel(\cf8 string\cf7  submodel) \{ \cf9 m_submodel\cf7  = submodel; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setChipset(\cf8 string\cf7  chipset) \{ \cf9 m_chipset\cf7  = chipset; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setRamSize(\cf6 int\cf7  ramSize) \{ \cf9 m_ramSize\cf7  = ramSize; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setStorageRating(\cf6 int\cf7  storageRating) \{ \cf9 m_storageRating\cf7  = storageRating; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setQuantity(\cf6 int\cf7  quantity) \{ \cf9 m_quantity\cf7  = quantity; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setPrice(\cf6 double\cf7  price) \{ \cf9 m_price\cf7  = price; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  \cf6 operator\cf7 ==(\cf6 const\cf7  \cf9 XboxConsole\cf7 & other);
\f1 \cf0 \

\f0 \cf7     \cf8 ostream\cf7  \cf6 operator\cf7 <<(\cf6 const\cf7  \cf9 XboxConsole\cf7 & other);
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 friend\cf7  \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxConsole\cf7 & x);
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7 \};
\f1 \cf0 \
\

\f0 \cf4 #endif \cf2 /* XboxConsole_h */\
\
\
\
\
\
//XboxController.h\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #ifndef XBOXCONTROLLER_H
\f1 \cf0 \

\f0 \cf4 #define XBOXCONTROLLER_H
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \
\

\f0 \cf6 using\cf7  \cf6 namespace\cf7  \cf8 std\cf7 ;
\f1 \cf0 \
\

\f0 \cf6 class\cf7  XboxController
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 private\cf7 :
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7         \cf6 static\cf7  \cf6 int\cf7  s_nextID;
\f1 \cf0 \

\f0 \cf7         \cf6 int\cf7  m_id;
\f1 \cf0 \

\f0 \cf7         \cf8 string\cf7  m_generation;
\f1 \cf0 \

\f0 \cf7         \cf8 string\cf7  m_layout;
\f1 \cf0 \

\f0 \cf7         \cf8 string\cf7  m_design;
\f1 \cf0 \

\f0 \cf7         \cf8 string\cf7  m_color;
\f1 \cf0 \

\f0 \cf7         \cf6 int\cf7  m_quantity;
\f1 \cf0 \

\f0 \cf7         \cf6 double\cf7  m_price;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 public\cf7 :
\f1 \cf0 \

\f0 \cf7         XboxController();
\f1 \cf0 \

\f0 \cf7         XboxController(\cf8 string\cf7 , \cf8 string\cf7 , \cf8 string\cf7 , \cf8 string\cf7 , \cf6 int\cf7 , \cf6 double\cf7 );
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 int\cf7  getId() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_id\cf7 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf8 string\cf7  getGeneration() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_generation\cf7 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf8 string\cf7  getLayout() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_layout\cf7 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf8 string\cf7  getDesign() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_design\cf7 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf8 string\cf7  getColor() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_color\cf7 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 int\cf7  getQuantity () \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_quantity\cf7 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 double\cf7  getPrice() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_price\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 void\cf7  setGeneration(\cf8 string\cf7  generation) \{ \cf9 m_generation\cf7  = generation; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 void\cf7  setLayout(\cf8 string\cf7  layout) \{ \cf9 m_layout\cf7  = layout; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 void\cf7  setDesign(\cf8 string\cf7  design) \{ \cf9 m_design\cf7  = design; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 void\cf7  setColor(\cf8 string\cf7  color) \{ \cf9 m_color\cf7  = color; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 void\cf7  setQuantity(\cf6 int\cf7  quantity) \{ \cf9 m_quantity\cf7  = quantity; \}
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 void\cf7  setPrice(\cf6 double\cf7  price) \{ \cf9 m_price\cf7  = price; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7         \cf6 bool\cf7  \cf6 operator\cf7 ==(\cf6 const\cf7  \cf9 XboxController\cf7 & other);
\f1 \cf0 \

\f0 \cf7         \cf8 ostream\cf7  \cf6 operator\cf7 <<(\cf6 const\cf7  \cf9 XboxController\cf7 & other);
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7         \cf6 friend\cf7  \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxController\cf7 & xc);
\f1 \cf0 \

\f0 \cf7 \};
\f1 \cf0 \
\

\f0 \cf4 #endif \cf2 /* XboxController_h */
\f1 \cf0 \

\f0 \cf2 \
\
\
\
\
\
//XboxExclusive.h\
\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #ifndef XBOXEXCLUSIVE_H
\f1 \cf0 \

\f0 \cf4 #define XBOXEXCLUSIVE_H
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \
\

\f0 \cf6 using\cf7  \cf6 namespace\cf7  \cf8 std\cf7 ;
\f1 \cf0 \
\

\f0 \cf6 class\cf7  XboxExclusive
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf6 private\cf7 :
\f1 \cf0 \

\f0 \cf7     \cf6 static\cf7  \cf6 int\cf7  s_nextID;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_id;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_generation;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_title;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_edition;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  m_genre;
\f1 \cf0 \

\f0 \cf7     \cf6 char\cf7  m_esrbRating;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_quantity;
\f1 \cf0 \

\f0 \cf7     \cf6 double\cf7  m_price;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf6 public\cf7 :
\f1 \cf0 \

\f0 \cf7     XboxExclusive();
\f1 \cf0 \

\f0 \cf7     XboxExclusive(\cf8 string\cf7 , \cf8 string\cf7 , \cf8 string\cf7 , \cf8 string\cf7 , \cf6 char\cf7 , \cf6 int\cf7 , \cf6 double\cf7 );
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getId() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_id\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getGeneration() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_generation\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getTitle() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_title\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getEdition() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_edition\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf8 string\cf7  getGenre() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_genre\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 char\cf7  getEsrbRating() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_esrbRating\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getQuantity () \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_quantity\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 double\cf7  getPrice() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_price\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setGeneration(\cf8 string\cf7  generation) \{ \cf9 m_generation\cf7  = generation; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setTitle(\cf8 string\cf7  title) \{ \cf9 m_title\cf7  = title; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setEdition(\cf8 string\cf7  edition) \{ \cf9 m_edition\cf7  = edition; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setGenre(\cf8 string\cf7  genre) \{ \cf9 m_genre\cf7  = genre; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setEsrbRating(\cf6 char\cf7  esrbRating) \{ \cf9 m_esrbRating\cf7  = esrbRating; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setQuantity(\cf6 int\cf7  quantity) \{ \cf9 m_quantity\cf7  = quantity; \}
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 void\cf7  setPrice(\cf6 double\cf7  price) \{ \cf9 m_price\cf7  = price; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  \cf6 operator\cf7 ==(\cf6 const\cf7  \cf9 XboxExclusive\cf7 & other);
\f1 \cf0 \

\f0 \cf7     \cf8 ostream\cf7  \cf6 operator\cf7 <<(\cf6 const\cf7  \cf9 XboxExclusive\cf7 & other);
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 friend\cf7  \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxExclusive\cf7 & xe);
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7 \};
\f1 \cf0 \
\
\

\f0 \cf4 #endif \cf2 /* XboxExclusive_h */\
\
\
\
\
\
\
\
//XboxConsoleList.h\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #ifndef XBOXCONSOLELIST_H
\f1 \cf0 \

\f0 \cf4 #define XBOXCONSOLELIST_H
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxConsole.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \
\

\f0 \cf6 class\cf7  XboxConsoleList
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf6 private\cf7 :
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_count;
\f1 \cf0 \

\f0 \cf7     \cf6 const\cf7  \cf6 static\cf7  \cf6 int\cf7  SIZE = \cf10 \cb3 100\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 XboxConsole\cf7  m_list[\cf9 SIZE\cf7 ];
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf6 public\cf7 :
\f1 \cf0 \

\f0 \cf7     XboxConsoleList() \{ \cf9 m_count\cf7  = \cf10 \cb3 0\cf7 \cb3 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  addXbox(\cf9 XboxConsole\cf7  xb);
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  removeXbox(\cf6 int\cf7  \cf6 id\cf7 );
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  updateConsole(\cf6 int\cf7  \cf6 id\cf7 , \cf8 string\cf7  generation, \cf8 string\cf7  submodel, \cf8 string\cf7  chipset, \cf6 int\cf7  ramSize, \cf6 int\cf7  storageRating, \cf6 int\cf7  quantity, \cf6 double\cf7  price);
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getCount() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_count\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 friend\cf7  \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxConsoleList\cf7 & xb);
\f1 \cf0 \

\f0 \cf7 \};
\f1 \cf0 \
\

\f0 \cf4 #endif \cf2 /* XboxConsoleList_h */\
\
\
\
\
\
\
//XboxControllerList.h
\f1 \cf0 \

\f0 \cf2 \
\

\f1 \cf0 \

\f0 \cf2 /****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #ifndef XBOXCONTROLLERLIST_H
\f1 \cf0 \

\f0 \cf4 #define XBOXCONTROLLERLIST_H
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxController.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \
\

\f0 \cf6 class\cf7  XboxControllerList
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 private\cf7 :
\f1 \cf0 \

\f0 \cf7         \cf6 int\cf7  m_count;
\f1 \cf0 \

\f0 \cf7         \cf6 const\cf7  \cf6 static\cf7  \cf6 int\cf7  SIZE = \cf10 \cb3 100\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7         \cf9 XboxController\cf7  m_list[\cf9 SIZE\cf7 ];
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 public\cf7 :
\f1 \cf0 \

\f0 \cf7         XboxControllerList() \{ \cf9 m_count\cf7  = \cf10 \cb3 0\cf7 \cb3 ; \}
\f1 \cf0 \

\f0 \cf7         \cf6 bool\cf7  addXboxController(\cf9 XboxController\cf7  xc);
\f1 \cf0 \

\f0 \cf7         \cf6 bool\cf7  removeXboxController(\cf6 int\cf7  \cf6 id\cf7 );
\f1 \cf0 \

\f0 \cf7         \cf6 bool\cf7  updateController(\cf6 int\cf7  \cf6 id\cf7 , \cf8 string\cf7  generation, \cf8 string\cf7  layout, \cf8 string\cf7  design, \cf8 string\cf7  color, \cf6 int\cf7  quantity, \cf6 double\cf7  price);
\f1 \cf0 \

\f0 \cf7         \cf6 inline\cf7  \cf6 int\cf7  getCount() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_count\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7         \cf6 friend\cf7  \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxControllerList\cf7 & xc);
\f1 \cf0 \

\f0 \cf7     \};
\f1 \cf0 \
\
\

\f0 \cf4 #endif \cf2 /* XboxControllerList_h */\
\
\
\
\

\f1 \cf0 \

\f0 \cf2 //XboxExclusiveList.h\
\
\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #ifndef XBOXEXCLUSIVELIST_H
\f1 \cf0 \

\f0 \cf4 #define XBOXEXCLUSIVELIST_H
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxExclusive.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \
\

\f0 \cf6 class\cf7  XboxExclusiveList
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf6 private\cf7 :
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  m_count;
\f1 \cf0 \

\f0 \cf7     \cf6 const\cf7  \cf6 static\cf7  \cf6 int\cf7  SIZE = \cf10 \cb3 100\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 XboxExclusive\cf7  m_list[\cf9 SIZE\cf7 ];
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf6 public\cf7 :
\f1 \cf0 \

\f0 \cf7     XboxExclusiveList() \{ \cf9 m_count\cf7  = \cf10 \cb3 0\cf7 \cb3 ; \}
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  addXboxExclusive(\cf9 XboxExclusive\cf7  xe);
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  removeXboxExclusive(\cf6 int\cf7  \cf6 id\cf7 );
\f1 \cf0 \

\f0 \cf7     \cf6 bool\cf7  updateExclusive(\cf6 int\cf7  \cf6 id\cf7 , \cf8 string\cf7  generation, \cf8 string\cf7  title, \cf8 string\cf7  edition, \cf8 string\cf7  genre, \cf6 char\cf7  esrbRating, \cf6 int\cf7  quantity, \cf6 double\cf7  price);
\f1 \cf0 \

\f0 \cf7     \cf6 inline\cf7  \cf6 int\cf7  getCount() \cf6 const\cf7  \{ \cf6 return\cf7  \cf9 m_count\cf7 ; \}
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 friend\cf7  \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxExclusiveList\cf7 & xe);
\f1 \cf0 \

\f0 \cf7 \};
\f1 \cf0 \
\

\f0 \cf4 #endif \cf2 /* XboxExclusiveList_h */\
\
\
\
\
\
//XboxConsole.cpp\
\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxConsole.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 <string>
\f1 \cf0 \
\

\f0 \cf6 int\cf7  \cf9 XboxConsole\cf7 ::s_nextID = \cf10 \cb3 10000\cf7 \cb3 ;
\f1 \cf0 \
\

\f0 \cf9 XboxConsole\cf7 ::XboxConsole()
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 m_id\cf7  = \cf9 s_nextID\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_generation\cf7  = \cf5 "One"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_submodel\cf7  = \cf5 "X"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_chipset\cf7  = \cf5 "Evolved Jaguar"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_ramSize\cf7  = \cf10 \cb3 12\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_storageRating\cf7  = \cf10 \cb3 500\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_quantity\cf7  = \cf10 \cb3 1\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_price\cf7  = \cf10 \cb3 400\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf9 XboxConsole\cf7 ::XboxConsole(\cf8 string\cf7  generation, \cf8 string\cf7  submodel, \cf8 string\cf7  chipset, \cf6 int\cf7  ramSize, \cf6 int\cf7  storageRating, \cf6 int\cf7  quantity, \cf6 double\cf7  price)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 m_id\cf7  = \cf9 s_nextID\cf7 ++;
\f1 \cf0 \

\f0 \cf7     \cf9 m_generation\cf7  = generation;
\f1 \cf0 \

\f0 \cf7     \cf9 m_submodel\cf7  = submodel;
\f1 \cf0 \

\f0 \cf7     \cf9 m_chipset\cf7  = chipset;
\f1 \cf0 \

\f0 \cf7     \cf9 m_ramSize\cf7  = ramSize;
\f1 \cf0 \

\f0 \cf7     \cf9 m_storageRating\cf7  = storageRating;
\f1 \cf0 \

\f0 \cf7     \cf9 m_quantity\cf7  = quantity;
\f1 \cf0 \

\f0 \cf7     \cf9 m_price\cf7  = price;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxConsole\cf7 ::\cf6 operator\cf7 ==(\cf6 const\cf7  \cf9 XboxConsole\cf7 & other)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf9 m_generation\cf7  == other.\cf9 m_generation\cf7  && \cf9 m_submodel\cf7  == other.\cf9 m_submodel\cf7  && \cf9 m_chipset\cf7  == other.\cf9 m_chipset\cf7  && \cf9 m_ramSize\cf7  == other.\cf9 m_ramSize\cf7  && \cf9 m_storageRating\cf7  == other.\cf9 m_storageRating\cf7  && \cf9 m_quantity\cf7  == other.\cf9 m_quantity\cf7  && \cf9 m_price\cf7  == other.\cf9 m_price\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxConsole\cf7 & x)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     os << \cf5 "Xbox [ID#"\cf7  << x.\cf9 m_id\cf7  << \cf5 ", Generation="\cf7  << x.\cf9 m_generation\cf7  << \cf5 ", Submodel="\cf7  << x.\cf9 m_submodel\cf7  << \cf5 ", Chipset="\cf7  << x.\cf9 m_chipset
\f1 \cf0 \

\f0 \cf7     << \cf5 ", RAM Size="\cf7  << x.\cf9 m_ramSize\cf7  << \cf5 " GB, Storage Rating="\cf7  << x.\cf9 m_storageRating\cf7  << \cf5 " GB, Quantity="\cf7  << x.\cf9 m_quantity
\f1 \cf0 \

\f0 \cf7     << \cf5 ", Price=$"\cf7  << x.\cf9 m_price\cf7  << \cf5 "]"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  os;
\f1 \cf0 \

\f0 \cf7 \}\
\
\
\
\
\
//XboxController.cpp\
\
\
\
\cf2 /****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \

\f0 \cf2 //
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxController.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 <string>
\f1 \cf0 \
\

\f0 \cf6 int\cf7  \cf9 XboxController\cf7 ::s_nextID = \cf10 \cb3 10000\cf7 \cb3 ;
\f1 \cf0 \
\

\f0 \cf9 XboxController\cf7 ::XboxController()
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 m_id\cf7  = \cf9 s_nextID\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_generation\cf7  = \cf5 "One"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_layout\cf7  = \cf5 "Elite"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_design\cf7  = \cf5 "Standard"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_color\cf7  = \cf5 "Red"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_quantity\cf7  = \cf10 \cb3 1\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_price\cf7  = \cf10 \cb3 60\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf9 XboxController\cf7 ::XboxController(\cf8 string\cf7  generation, \cf8 string\cf7  layout, \cf8 string\cf7  design, \cf8 string\cf7  color, \cf6 int\cf7  quantity, \cf6 double\cf7  price)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 m_id\cf7  = \cf9 s_nextID\cf7 ++;
\f1 \cf0 \

\f0 \cf7     \cf9 m_generation\cf7  = generation;
\f1 \cf0 \

\f0 \cf7     \cf9 m_layout\cf7  = layout;
\f1 \cf0 \

\f0 \cf7     \cf9 m_design\cf7  = design;
\f1 \cf0 \

\f0 \cf7     \cf9 m_color\cf7  = color;
\f1 \cf0 \

\f0 \cf7     \cf9 m_quantity\cf7  = quantity;
\f1 \cf0 \

\f0 \cf7     \cf9 m_price\cf7  = price;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxController\cf7 ::\cf6 operator\cf7 ==(\cf6 const\cf7  \cf9 XboxController\cf7 & other)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf9 m_generation\cf7  == other.\cf9 m_generation\cf7  && \cf9 m_layout\cf7  == other.\cf9 m_layout\cf7  && \cf9 m_design\cf7  == other.\cf9 m_design\cf7  && \cf9 m_color\cf7  == other.\cf9 m_color\cf7  && \cf9 m_quantity\cf7  == other.\cf9 m_quantity\cf7  && \cf9 m_price\cf7  == other.\cf9 m_price\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxController\cf7 & xc)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     os << \cf5 "Xbox Controller[ID#"\cf7  << xc.\cf9 m_id\cf7  << \cf5 ", Generation="\cf7  << xc.\cf9 m_generation\cf7  << \cf5 ", Layout="\cf7  << xc.\cf9 m_layout\cf7  << \cf5 ", Design="\cf7  << xc.\cf9 m_design
\f1 \cf0 \

\f0 \cf7     << \cf5 ", Color="\cf7  << xc.\cf9 m_color\cf7  << \cf5 ", Quantity="\cf7  << xc.\cf9 m_quantity
\f1 \cf0 \

\f0 \cf7     << \cf5 ", Price=$"\cf7  << xc.\cf9 m_price\cf7  << \cf5 "]"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  os;
\f1 \cf0 \

\f0 \cf7 \}\
\
\
\
\
\
\
//XboxExclusive.cpp\
\
\
\
\
\cf2 /****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxExclusive.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 <string>
\f1 \cf0 \
\

\f0 \cf6 int\cf7  \cf9 XboxExclusive\cf7 ::s_nextID = \cf10 \cb3 10000\cf7 \cb3 ;
\f1 \cf0 \
\

\f0 \cf9 XboxExclusive\cf7 ::XboxExclusive()
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 m_id\cf7  = \cf9 s_nextID\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_generation\cf7  = \cf5 "360"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_title\cf7  = \cf5 "Halo 3"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_edition\cf7  = \cf5 "Standard"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_genre\cf7  = \cf5 "Sci-Fi"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_esrbRating\cf7  = \cf10 \cb3 'M'\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_quantity\cf7  = \cf10 \cb3 1\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf9 m_price\cf7  = \cf10 \cb3 60\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf9 XboxExclusive\cf7 ::XboxExclusive(\cf8 string\cf7  generation, \cf8 string\cf7  title, \cf8 string\cf7  edition, \cf8 string\cf7  genre, \cf6 char\cf7  esrbRating, \cf6 int\cf7  quantity, \cf6 double\cf7  price)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 m_id\cf7  = \cf9 s_nextID\cf7 ++;
\f1 \cf0 \

\f0 \cf7     \cf9 m_generation\cf7  = generation;
\f1 \cf0 \

\f0 \cf7     \cf9 m_title\cf7  = title;
\f1 \cf0 \

\f0 \cf7     \cf9 m_edition\cf7  = edition;
\f1 \cf0 \

\f0 \cf7     \cf9 m_genre\cf7  = genre;
\f1 \cf0 \

\f0 \cf7     \cf9 m_esrbRating\cf7  = esrbRating;
\f1 \cf0 \

\f0 \cf7     \cf9 m_quantity\cf7  = quantity;
\f1 \cf0 \

\f0 \cf7     \cf9 m_price\cf7  = price;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxExclusive\cf7 ::\cf6 operator\cf7 ==(\cf6 const\cf7  \cf9 XboxExclusive\cf7 & other)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf9 m_generation\cf7  == other.\cf9 m_generation\cf7  && \cf9 m_title\cf7  == other.\cf9 m_title\cf7  && \cf9 m_edition\cf7  == other.\cf9 m_edition\cf7  && \cf9 m_genre\cf7  == other.\cf9 m_genre\cf7  && \cf9 m_esrbRating\cf7  == other.\cf9 m_esrbRating\cf7  && \cf9 m_quantity\cf7  == other.\cf9 m_quantity\cf7  && \cf9 m_price\cf7  == other.\cf9 m_price\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxExclusive\cf7 & xe)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     os << \cf5 "Xbox Exclusive[ID#"\cf7  << xe.\cf9 m_id\cf7  << \cf5 ", Generation="\cf7  << xe.\cf9 m_generation\cf7  << \cf5 ", Title="\cf7  << xe.\cf9 m_title\cf7  << \cf5 ", Edition="\cf7  << xe.\cf9 m_edition
\f1 \cf0 \

\f0 \cf7     << \cf5 ", Genre="\cf7  << xe.\cf9 m_genre\cf7  << \cf5 " , ESRB Rating="\cf7  << xe.\cf9 m_esrbRating\cf7  << \cf5 " , Quantity="\cf7  << xe.\cf9 m_quantity
\f1 \cf0 \

\f0 \cf7     << \cf5 ", Price=$"\cf7  << xe.\cf9 m_price\cf7  << \cf5 "]"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  os;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf2 \
\
\
\
\
//XboxConsoleList.cpp\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\
\

\f0 \cf4 #include \cf5 "XboxConsoleList.h"
\f1 \cf0 \
\

\f0 \cf6 using\cf7  \cf6 namespace\cf7  \cf8 std\cf7 ;
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxConsoleList\cf7 ::addXbox(\cf9 XboxConsole\cf7  xb)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 if\cf7 (\cf9 m_count\cf7  >= \cf9 SIZE\cf7  - \cf10 \cb3 1\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf9 m_list\cf7 [\cf9 m_count\cf7 ++] = xb;
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \

\f0 \cf6 bool\cf7  \cf9 XboxConsoleList\cf7 ::removeXbox(\cf6 int\cf7  id)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < \cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 if\cf7 (\cf9 m_list\cf7 [i].\cf9 getId\cf7 () == id)
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf6 for\cf7 (\cf6 int\cf7  j = i; j < \cf9 m_count\cf7 ; j++)
\f1 \cf0 \

\f0 \cf7             \{
\f1 \cf0 \

\f0 \cf7                 \cf9 m_list\cf7 [j] = \cf9 m_list\cf7 [j+\cf10 \cb3 1\cf7 \cb3 ];
\f1 \cf0 \

\f0 \cf7             \}
\f1 \cf0 \

\f0 \cf7             \cf9 m_count\cf7 --;
\f1 \cf0 \

\f0 \cf7             \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxConsoleList\cf7 ::updateConsole(\cf6 int\cf7  id, \cf8 string\cf7  generation, \cf8 string\cf7  submodel, \cf8 string\cf7  chipset, \cf6 int\cf7  ramSize, \cf6 int\cf7  storageRating, \cf6 int\cf7  quantity, \cf6 double\cf7  price)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < \cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 if\cf7 (id == \cf9 m_list\cf7 [i].\cf9 getId\cf7 ())
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setGeneration\cf7 (generation);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setSubmodel\cf7 (submodel);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setChipset\cf7 (chipset);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setRamSize\cf7 (ramSize);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setStorageRating\cf7 (storageRating);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setQuantity\cf7 (quantity);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setPrice\cf7 (price);
\f1 \cf0 \

\f0 \cf7             \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxConsoleList\cf7 & xb)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     os << \cf5 "~~~Current Inventory of Xbox Consoles~~~\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < xb.\cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         os << xb.\cf9 m_list\cf7 [i] << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  os;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \

\f0 \cf2 \
\
\
\
\
\
//XboxControllerList.cpp\
\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxControllerList.h"
\f1 \cf0 \
\

\f0 \cf6 using\cf7  \cf6 namespace\cf7  \cf8 std\cf7 ;
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxControllerList\cf7 ::addXboxController(\cf9 XboxController\cf7  xc)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 if\cf7 (\cf9 m_count\cf7  >= \cf9 SIZE\cf7  - \cf10 \cb3 1\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf9 m_list\cf7 [\cf9 m_count\cf7 ++] = xc;
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \

\f0 \cf6 bool\cf7  \cf9 XboxControllerList\cf7 ::removeXboxController(\cf6 int\cf7  id)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < \cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 if\cf7 (\cf9 m_list\cf7 [i].\cf9 getId\cf7 () == id)
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf6 for\cf7 (\cf6 int\cf7  j = i; j < \cf9 m_count\cf7 ; j++)
\f1 \cf0 \

\f0 \cf7             \{
\f1 \cf0 \

\f0 \cf7                 \cf9 m_list\cf7 [j] = \cf9 m_list\cf7 [j+\cf10 \cb3 1\cf7 \cb3 ];
\f1 \cf0 \

\f0 \cf7             \}
\f1 \cf0 \

\f0 \cf7             \cf9 m_count\cf7 --;
\f1 \cf0 \

\f0 \cf7             \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxControllerList\cf7 ::updateController(\cf6 int\cf7  id, \cf8 string\cf7  generation, \cf8 string\cf7  layout, \cf8 string\cf7  design, \cf8 string\cf7  color, \cf6 int\cf7  quantity, \cf6 double\cf7  price)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < \cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 if\cf7 (id == \cf9 m_list\cf7 [i].\cf9 getId\cf7 ())
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setGeneration\cf7 (generation);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setLayout\cf7 (layout);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setDesign\cf7 (design);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setColor\cf7 (color);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setQuantity\cf7 (quantity);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setPrice\cf7 (price);
\f1 \cf0 \

\f0 \cf7             \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxControllerList\cf7 & xc)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     os << \cf5 "~~~Current Inventory of Xbox Controllers~~~\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < xc.\cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         os << xc.\cf9 m_list\cf7 [i] << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  os;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \

\f0 \cf2 \
\
\
\
\
\
//XboxExclusiveList.cpp\
\
\
/****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 "XboxExclusiveList.h"
\f1 \cf0 \
\

\f0 \cf6 using\cf7  \cf6 namespace\cf7  \cf8 std\cf7 ;
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxExclusiveList\cf7 ::addXboxExclusive(\cf9 XboxExclusive\cf7  xe)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 if\cf7 (\cf9 m_count\cf7  >= \cf9 SIZE\cf7  - \cf10 \cb3 1\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf9 m_list\cf7 [\cf9 m_count\cf7 ++] = xe;
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \

\f0 \cf6 bool\cf7  \cf9 XboxExclusiveList\cf7 ::removeXboxExclusive(\cf6 int\cf7  id)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < \cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 if\cf7 (\cf9 m_list\cf7 [i].\cf9 getId\cf7 () == id)
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf6 for\cf7 (\cf6 int\cf7  j = i; j < \cf9 m_count\cf7 ; j++)
\f1 \cf0 \

\f0 \cf7             \{
\f1 \cf0 \

\f0 \cf7                 \cf9 m_list\cf7 [j] = \cf9 m_list\cf7 [j+\cf10 \cb3 1\cf7 \cb3 ];
\f1 \cf0 \

\f0 \cf7             \}
\f1 \cf0 \

\f0 \cf7             \cf9 m_count\cf7 --;
\f1 \cf0 \

\f0 \cf7             \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf6 bool\cf7  \cf9 XboxExclusiveList\cf7 ::updateExclusive(\cf6 int\cf7  id, \cf8 string\cf7  generation, \cf8 string\cf7  title, \cf8 string\cf7  edition, \cf8 string\cf7  genre, \cf6 char\cf7  esrbRating, \cf6 int\cf7  quantity, \cf6 double\cf7  price)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < \cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf6 if\cf7 (id == \cf9 m_list\cf7 [i].\cf9 getId\cf7 ())
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setGeneration\cf7 (generation);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setTitle\cf7 (title);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setEdition\cf7 (edition);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setGenre\cf7 (genre);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setEsrbRating\cf7 (esrbRating);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setQuantity\cf7 (quantity);
\f1 \cf0 \

\f0 \cf7             \cf9 m_list\cf7 [i].\cf9 setPrice\cf7 (price);
\f1 \cf0 \

\f0 \cf7             \cf6 return\cf7  \cf6 true\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  \cf6 false\cf7 ;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \
\

\f0 \cf8 ostream\cf7 & \cf6 operator\cf7 <<(\cf8 ostream\cf7 & os, \cf6 const\cf7  \cf9 XboxExclusiveList\cf7 & xe)
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     os << \cf5 "~~~Current Inventory of Xbox Exclusives~~~\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7     \cf6 for\cf7 (\cf6 int\cf7  i = \cf10 \cb3 0\cf7 \cb3 ; i < xe.\cf9 m_count\cf7 ; i++)
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         os << xe.\cf9 m_list\cf7 [i] << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7     \}
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  os;
\f1 \cf0 \

\f0 \cf7 \}\
\
\
\
\
\
\
\
\
\
//Project05_CapstonePhase1 (main)\
\

\f1 \cf0 \

\f0 \cf2 /****************************************************
\f1 \cf0 \

\f0 \cf2  * AUTHOR: Kyle Stephan Harris
\f1 \cf0 \

\f0 \cf2  * COURSE: CS 150: C++ Programming 1
\f1 \cf0 \

\f0 \cf2  * SECTION: TTh 11:00-12:50
\f1 \cf0 \

\f0 \cf2  * PROJECT: 05
\f1 \cf0 \

\f0 \cf2  * LAST MODIFIED: 11/30/18
\f1 \cf0 \

\f0 \cf2  *****************************************************/
\f1 \cf0 \

\f0 \cf2 /*****************************************************************************
\f1 \cf0 \

\f0 \cf2  * CapstonePhase1
\f1 \cf0 \

\f0 \cf2  *****************************************************************************/
\f1 \cf0 \
\

\f0 \cf4 #include \cf5 <cstdlib>
\f1 \cf0 \

\f0 \cf4 #include \cf5 <iostream>
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxConsole.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxConsoleList.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxController.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxControllerList.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxExclusive.h"
\f1 \cf0 \

\f0 \cf4 #include \cf5 "XboxExclusiveList.h"
\f1 \cf0 \
\

\f0 \cf6 int\cf7  main(\cf6 int\cf7  argc, \cf6 char\cf7  * argv[])
\f1 \cf0 \

\f0 \cf7 \{
\f1 \cf0 \

\f0 \cf7     \cf9 XboxConsoleList\cf7  x1;
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  generation, submodel, chipset;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  id, ramSize, storageRating, quantity;
\f1 \cf0 \

\f0 \cf7     \cf6 double\cf7  price;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  choice = \cf10 \cb3 0\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     \cf6 int\cf7  mainChoice = \cf10 \cb3 0\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf2 //string generation,
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  layout, design, color;
\f1 \cf0 \

\f0 \cf7     \cf2 //double price;
\f1 \cf0 \

\f0 \cf7     \cf2 //int id, quantity;
\f1 \cf0 \

\f0 \cf7     \cf9 XboxControllerList\cf7  controllerList;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf2 //string generation,
\f1 \cf0 \

\f0 \cf7     \cf8 string\cf7  title, edition, genre;
\f1 \cf0 \

\f0 \cf7     \cf6 char\cf7  esrbRating;
\f1 \cf0 \

\f0 \cf7     \cf2 //int id, quantity;
\f1 \cf0 \

\f0 \cf7     \cf2 //double price;
\f1 \cf0 \

\f0 \cf7     \cf9 XboxExclusiveList\cf7  exclusiveList;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     \cf6 do
\f1 \cf0 \

\f0 \cf7     \{
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "************************************************************************"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "**                                                                    **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "**                          WELCOME TO THE                            **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "**                        XBOX INVENTORY APP                          **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "**                                                                    **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "************************************************************************"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "** Please make a choice from the following options:                   **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "** 1)  Xbox Console Inventory                                         **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "** 2)  Xbox Controller Inventory                                      **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "** 3)  Xbox Exclusive Inventory                                       **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "** 4)  Exit                                                           **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 "************************************************************************"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cout\cf7  << \cf5 ">> "\cf7 ;
\f1 \cf0 \

\f0 \cf7         \cf8 cin\cf7  >> mainChoice;
\f1 \cf0 \

\f0 \cf7         \cf8 cin\cf7 .\cf8 ignore\cf7 (\cf4 INT_MAX\cf7 , \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7         
\f1 \cf0 \

\f0 \cf7         \cf6 switch\cf7 (mainChoice)
\f1 \cf0 \

\f0 \cf7         \{
\f1 \cf0 \

\f0 \cf7             \cf6 case\cf7  \cf10 \cb3 1\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7             \{
\f1 \cf0 \

\f0 \cf7                 \cf6 do
\f1 \cf0 \

\f0 \cf7                 \{
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "************************************************************************"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "** Please make a choice from the following options:                   **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "** 1)  Add a new Xbox to Inventory                                    **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "** 2)  Remove an Xbox from Inventory                                  **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "** 3)  Update an existing Xbox Console                                **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "** 4)  Display all Xbox Consoles in Inventory                         **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "** 5)  Exit                                                           **"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 "************************************************************************"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cout\cf7  << \cf5 ">> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                     \cf8 cin\cf7  >> choice;
\f1 \cf0 \

\f0 \cf7                     \cf8 cin\cf7 .\cf8 ignore\cf7 (\cf4 INT_MAX\cf7 , \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                     \cf6 switch\cf7  (choice)
\f1 \cf0 \

\f0 \cf7                     \{
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 1\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter Xbox Generation: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 getline\cf7 (\cf8 cin\cf7 , generation);
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter Submodel: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 getline\cf7 (\cf8 cin\cf7 , submodel);
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter Chipset: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 getline\cf7 (\cf8 cin\cf7 , chipset);
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter RAM Size: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 cin\cf7  >> ramSize;
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter Storage Rating: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 cin\cf7  >> storageRating;
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter Quantity: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 cin\cf7  >> quantity;
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "Enter Price $"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 cin\cf7  >> price;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf9 XboxConsole\cf7  xb(generation, submodel, chipset, ramSize, storageRating, quantity, price);
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (x1.\cf9 addXbox\cf7 (xb))
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 \cf8 cout\cf7  << \cf5 "~~~Xbox added successfully!~~~"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 \cf8 cout\cf7  << \cf5 "Inventory full, please try again after removing."\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 2\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (x1.\cf9 getCount\cf7 () == \cf10 \cb3 0\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 \cf8 cout\cf7  << \cf5 "There is nothing to remove!\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 \cf8 cout\cf7  << x1 << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                                 \cf8 cout\cf7  << \cf5 "\\nWhich ID# would you like to remove? (or -1 to cancel) >> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                                 \cf8 cin\cf7  >> id;
\f1 \cf0 \

\f0 \cf7                                 \cf6 if\cf7 (x1.\cf9 removeXbox\cf7 (id))
\f1 \cf0 \

\f0 \cf7                                 \{
\f1 \cf0 \

\f0 \cf7                                     \cf8 cout\cf7  << \cf5 "~~~Xbox removed successfully!~~~"\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                                 \}
\f1 \cf0 \

\f0 \cf7                                 \cf6 else
\f1 \cf0 \

\f0 \cf7                                 \{
\f1 \cf0 \

\f0 \cf7                                     \cf8 cout\cf7  << \cf5 "That ID does not exist."\cf7  << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                                 \}
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 3\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << x1 << \cf8 endl\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf8 cout\cf7  << \cf5 "\\nWhich ID# would you like to update? (or -1 to cancel) >> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> id;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (id == -\cf10 \cb3 1\cf7 \cb3 ) \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin.ignore(INT_MAX, \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Xbox Generation: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, generation);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Submodel: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, submodel);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Chipset: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, chipset);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated RAM Size: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> ramSize;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Storage Rating: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> storageRating;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Quantity: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> quantity;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Price $"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> price;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (x1.updateConsole(id, generation, submodel, chipset, ramSize, storageRating, quantity, price))
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "\\n~~~Xbox Console Update Successful~~~\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "\\n~~~Failed to Update Xbox Console~~~\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                         \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 4\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (x1.getCount() == \cf10 \cb3 0\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Current Inventory of Xbox Consoles~~~\\n\\nEmpty\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << x1 << endl;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 5\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         
\f1 \cf0 \

\f0 \cf7                     \}
\f1 \cf0 \

\f0 \cf7                     
\f1 \cf0 \

\f0 \cf7                 \}\cf6 while\cf7  (choice != \cf10 \cb3 5\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7             
\f1 \cf0 \

\f0 \cf7             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7             \}
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7             \cf6 case\cf7  \cf10 \cb3 2\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7             \{
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7                 \cf6 int\cf7  userChoice = \cf10 \cb3 0\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7                 \cf6 do\cf7  \{
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "************************************************************************"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** Please make a choice from the following options:                   **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 1)  Add a new Xbox Controller to Inventory                         **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 2)  Remove a Xbox Controller from Inventory                        **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 3)  Update an existing Xbox Controller                             **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 4)  Display all Xbox Controllers in Inventory                      **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 5)  Exit                                                           **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "************************************************************************"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 ">> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                     cin >> userChoice;
\f1 \cf0 \

\f0 \cf7                     cin.ignore(INT_MAX, \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                     \cf6 switch\cf7  (userChoice)
\f1 \cf0 \

\f0 \cf7                     \{
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 1\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Xbox Generation: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, generation);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Layout: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, layout);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Design: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, design);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Color: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, color);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Quantity: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> quantity;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Price $"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> price;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             XboxController xc(generation, layout, design, color, quantity, price);
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (controllerList.addXboxController(xc))
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Xbox Controller added successfully!~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Failed to add Xbox Controller to Inventory~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             cout << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 2\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             cout << controllerList << endl;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "\\nWhich ID# would you like to remove? (or -1 to cancel) >> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> id;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (id == -\cf10 \cb3 1\cf7 \cb3 ) \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (controllerList.removeXboxController(id))
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Xbox Controller removed successfully!~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Failed to remove Xbox Controller from Inventory~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 3\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             cout << controllerList << endl;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "\\nWhich ID# would you like to update? (or -1 to cancel) >> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> id;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (id == -\cf10 \cb3 1\cf7 \cb3 ) \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin.ignore(INT_MAX, \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Updated Xbox Generation: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, generation);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Updated Layout: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, layout);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Updated Design: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, design);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Updated Color: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, color);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Updated Quantity: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> quantity;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Updated Price $"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> price;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (controllerList.updateController(id, generation, layout, design, color, quantity, price))
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "\\n~~~Xbox Controller Update Successful~~~\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "\\n~~~Failed to Update Xbox Controller~~~\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 4\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (controllerList.getCount() == \cf10 \cb3 0\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Current Inventory of Xbox Controllers~~~\\n\\nEmpty\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             cout << controllerList << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 5\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \cf6 default\cf7 :
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Choice not recognized, please drop in again."\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     \}
\f1 \cf0 \

\f0 \cf7                     
\f1 \cf0 \

\f0 \cf7                 \} \cf6 while\cf7  (userChoice != \cf10 \cb3 5\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                 cout << endl;
\f1 \cf0 \

\f0 \cf7             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7             \}
\f1 \cf0 \

\f0 \cf7             
\f1 \cf0 \

\f0 \cf7             \cf6 case\cf7  \cf10 \cb3 3\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7             \{
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7                 \cf6 int\cf7  userChoice = \cf10 \cb3 0\cf7 \cb3 ;
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7                 \cf6 do\cf7  \{
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "************************************************************************"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** Please make a choice from the following options:                   **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 1)  Add a new Xbox Exclusive to Inventory                          **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 2)  Remove an Xbox Exclusive from Inventory                        **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 3)  Update an existing Xbox Exclusive                              **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 4)  Display all Xbox Exclusives in Inventory                       **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "** 5)  Exit                                                           **"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 "************************************************************************"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     cout << \cf5 ">> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                     cin >> userChoice;
\f1 \cf0 \

\f0 \cf7                     cin.ignore(INT_MAX, \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                     \cf6 switch\cf7  (userChoice)
\f1 \cf0 \

\f0 \cf7                     \{
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 1\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Xbox Generation: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, generation);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Title: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, title);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Edition: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, edition);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Genre: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, genre);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter ESRB Rating: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> esrbRating;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Quantity: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> quantity;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter Price $"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> price;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             XboxExclusive xe(generation, title, edition, genre, esrbRating, quantity, price);
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (exclusiveList.addXboxExclusive(xe))
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Xbox exclusive added successfully!~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Failed to add xbox exclusive to Inventory~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             cout << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 2\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                             cout << exclusiveList << endl;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "\\nWhich ID# would you like to remove? (or -1 to cancel) >> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> id;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (id == -\cf10 \cb3 1\cf7 \cb3 ) \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (exclusiveList.removeXboxExclusive(id))
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Xbox exclusive removed successfully!~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Failed to remove xbox exclusive from Inventory~~~"\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 3\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             cout << exclusiveList << endl;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "\\nWhich ID# would you like to update? (or -1 to cancel) >> "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> id;
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7  (id == -\cf10 \cb3 1\cf7 \cb3 ) \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin.ignore(INT_MAX, \cf10 \cb3 '\\n'\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Generation: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, generation);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Title: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, title);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Edition: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, edition);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Genre: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             getline(cin, genre);
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated ESRB Rating: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> esrbRating;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Quantity: "\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> quantity;
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Enter updated Price $"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             cin >> price;
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (exclusiveList.updateExclusive(id, generation, title, edition, genre, esrbRating, quantity, price))
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "\\n~~~Xbox Exclusive Update Successful~~~\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             \cf6 else
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "\\n~~~Failed to Update Xbox Exclusive~~~\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 4\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                         \{
\f1 \cf0 \

\f0 \cf7                             \cf6 if\cf7 (exclusiveList.getCount() == \cf10 \cb3 0\cf7 \cb3 )
\f1 \cf0 \

\f0 \cf7                             \{
\f1 \cf0 \

\f0 \cf7                                 cout << \cf5 "~~~Current Inventory of Xbox Exclusives~~~\\n\\nEmpty\\n\\n"\cf7 ;
\f1 \cf0 \

\f0 \cf7                             \}
\f1 \cf0 \

\f0 \cf7                             cout << exclusiveList << endl;
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \}
\f1 \cf0 \

\f0 \cf7                         \cf6 case\cf7  \cf10 \cb3 5\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                         \cf6 default\cf7 :
\f1 \cf0 \

\f0 \cf7                             cout << \cf5 "Choice not recognized, please drop in again."\cf7  << endl;
\f1 \cf0 \

\f0 \cf7                     \}
\f1 \cf0 \

\f0 \cf7                     
\f1 \cf0 \

\f0 \cf7                 \} \cf6 while\cf7  (userChoice != \cf10 \cb3 5\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7                 cout << endl;
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7             \}
\f1 \cf0 \

\f0 \cf7             
\f1 \cf0 \

\f0 \cf7             \cf6 case\cf7  \cf10 \cb3 4\cf7 \cb3 :
\f1 \cf0 \

\f0 \cf7                 cout << \cf5 "Thank you for using Xbox Inventory!"\cf7 ;
\f1 \cf0 \

\f0 \cf7             \cf6 break\cf7 ;
\f1 \cf0 \

\f0 \cf7                 
\f1 \cf0 \

\f0 \cf7             \cf6 default\cf7 :
\f1 \cf0 \

\f0 \cf7                 cout << \cf5 "Please use a valid choice"\cf7 ;
\f1 \cf0 \

\f0 \cf7         \}
\f1 \cf0 \

\f0 \cf7         
\f1 \cf0 \

\f0 \cf7     \}\cf6 while\cf7 (mainChoice != \cf10 \cb3 4\cf7 \cb3 );
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     cout << endl;
\f1 \cf0 \

\f0 \cf7     
\f1 \cf0 \

\f0 \cf7     system(\cf5 "PAUSE"\cf7 );
\f1 \cf0 \

\f0 \cf7     \cf6 return\cf7  EXIT_SUCCESS;
\f1 \cf0 \

\f0 \cf7 \}
\f1 \cf0 \

\f0 \cf2 \
\
\
}